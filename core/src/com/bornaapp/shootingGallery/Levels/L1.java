package com.bornaapp.shootingGallery.Levels;import com.badlogic.ashley.core.PooledEngine;import com.badlogic.gdx.Gdx;import com.badlogic.gdx.Input;import com.badlogic.gdx.graphics.Color;import com.badlogic.gdx.math.Vector2;import com.badlogic.gdx.physics.box2d.Fixture;import com.badlogic.gdx.utils.TimeUtils;import com.bornaapp.borna2d.game.levels.Engine;import com.bornaapp.borna2d.game.levels.LevelBase;import com.bornaapp.borna2d.game.maps.Map;import com.bornaapp.borna2d.log;import com.bornaapp.borna2d.physics.BoxDef;import com.bornaapp.borna2d.systems.SoundSystem;import com.bornaapp.borna2d.systems.PathFindingSystem;import com.bornaapp.borna2d.systems.RenderingSystem;import com.bornaapp.shootingGallery.Characters.Bee;import com.bornaapp.shootingGallery.Characters.Rifle;import com.bornaapp.shootingGallery.Controls.CoinCounter;import com.bornaapp.shootingGallery.Controls.LifeCounter;import com.bornaapp.shootingGallery.Controls.PauseMenu;public class L1 extends LevelBase {    public L1() {        super("assetManifest_L1.json");        loadProgressively = true;    }    Rifle rifle;    Bee bee;    CoinCounter coinCounter;    LifeCounter lifeCounter;    PauseMenu pauseMenu;    boolean riffleIsDragging = false;    @Override    protected void onCreate() {        long t = TimeUtils.millis();        log.info("Time stamp is: " + Long.toString(t));        //Map        //        Map map = this.getMap();        map.EnableMargins(false, false, false, false);        map.Load("M1.tmx");        //Objects & Characters        //        rifle = new Rifle();        bee = new Bee(new Vector2(200f, 200f), map.getDiagonalGraph());        bee.addCheckPoint(new Vector2(200f, 300f));        bee.addCheckPoint(new Vector2(600f, 30f));        bee.addCheckPoint(new Vector2(700f, 300f));        bee.addCheckPoint(new Vector2(50f, 500f));        coinCounter = new CoinCounter();        lifeCounter = new LifeCounter();        pauseMenu = new PauseMenu();        map.EnableLayeredRendering();        rifle.zComp.z = 1;        map.InitLayer("water2", 2);        map.InitLayer("water1", 3);        bee.zComp.z = 4;        map.InitLayer("grass2", 5);        map.InitLayer("decorations", 6);        map.InitLayer("bg", 7);        //Ashley        //        PooledEngine ashleyEngine = getAshleyEngine();        PathFindingSystem pathFindingSystem = new PathFindingSystem(this);        pathFindingSystem.InitDebugRenderer(map.getDiagonalGraph());        ashleyEngine.addSystem(pathFindingSystem);        ashleyEngine.addSystem(new RenderingSystem(this));        ashleyEngine.addSystem(new SoundSystem(this));        //other initializations        //        this.backColor = Color.BLACK;        this.setLightingEnabled(false);        Engine.getInstance().setMasterVolume(1.0f);        //Controls & Menus        //        coinCounter.Init();        lifeCounter.Init();        pauseMenu.Init();        log.info("Loading time is: " + Long.toString(TimeUtils.timeSinceMillis(t)));    }    @Override    protected void onUpdate() {        rifle.update();        bee.update();        //queryInput        //        pauseMenu.setVisible(false);        if (Gdx.input.isKeyJustPressed(Input.Keys.ESCAPE)) {            this.paused = true;        }        //-------------------- Riffle control ---------------------        if (Gdx.input.isButtonPressed(Input.Buttons.LEFT)) {            if (rifle.bodyComp.isPickedByMouse(Gdx.input.getX(), Gdx.input.getY()))                riffleIsDragging = true;        } else            riffleIsDragging = false;        if (riffleIsDragging) {            Vector2 pos = rifle.bodyComp.getPositionOfCenter_inPixels();            float ppm = (float) Engine.getInstance().getConfig().ppm;            float deltaX = Gdx.input.getDeltaX() * (getCamera().viewportWidth / Engine.getInstance().WindowWidth());            float x = (pos.x + deltaX) ;            float y = ((BoxDef)rifle.bodyComp.shapeDef).height/2f;            rifle.bodyComp.body.setTransform(x/ ppm, y/ ppm, 0f);        }        if (Gdx.input.isKeyJustPressed(Input.Keys.R))            rifle.Reload();        // on-screen-debug texts & Lighting states        //        if (Gdx.input.isKeyJustPressed(Input.Keys.F1))            osd.SetF1(!osd.getF1());        if (Gdx.input.isKeyJustPressed(Input.Keys.F2))            osdVisible = !osdVisible;        osd.log("FPS", Integer.toString(Engine.getInstance().frameRate()));        //render debug info        //        if (Gdx.input.isKeyJustPressed(Input.Keys.NUM_3))            debugUI = !debugUI;        if (Gdx.input.isKeyJustPressed(Input.Keys.NUM_2)) //error        {            debugPhysics = !debugPhysics;            bee.setDrawDebug(!bee.isDrawDebug());        }        if (Gdx.input.isKeyJustPressed(Input.Keys.NUM_1)) //error            setLightingEnabled(!getLightingEnabled());    }    @Override    protected void whilePause() {        this.paused = true;        pauseMenu.setVisible(true);        if (Gdx.input.isKeyJustPressed(Input.Keys.ESCAPE)) {            this.paused = false;            pauseMenu.setVisible(false);        }    }    @Override    protected void onDispose() {    }    @Override    protected void onResize(int width, int height) {    }    @Override    protected void onPause() {    }    @Override    protected void onResume() {    }    //region Gesture Overrided methods    @Override    public boolean touchDown(float x, float y, int pointer, int button) {        return false;    }    @Override    public boolean tap(float x, float y, int count, int button) {        return true;    }    @Override    public boolean longPress(float x, float y) {        return false;    }    @Override    public boolean fling(float velocityX, float velocityY, int button) {        return false;    }    @Override    public boolean pan(float x, float y, float deltaX, float deltaY) {        return true;    }    @Override    public boolean panStop(float x, float y, int pointer, int button) {        return false;    }    @Override    public boolean zoom(float initialDistance, float distance) {        return false;    }    @Override    public boolean pinch(Vector2 initialPointer1, Vector2 initialPointer2, Vector2 pointer1, Vector2 pointer2) {        return false;    }    //endregion    @Override    public void NextLevel() {        Engine.getInstance().setLevel(new L1());    }    @Override    public void RestartLevel() {        Engine.getInstance().setLevel(new L1());    }}