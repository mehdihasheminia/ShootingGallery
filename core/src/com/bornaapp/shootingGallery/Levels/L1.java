package com.bornaapp.shootingGallery.Levels;import com.badlogic.ashley.core.PooledEngine;import com.badlogic.gdx.Gdx;import com.badlogic.gdx.Input;import com.badlogic.gdx.graphics.Color;import com.badlogic.gdx.graphics.g2d.TextureRegion;import com.badlogic.gdx.math.Vector2;import com.badlogic.gdx.math.Vector3;import com.badlogic.gdx.physics.box2d.Body;import com.badlogic.gdx.physics.box2d.Fixture;import com.badlogic.gdx.utils.TimeUtils;import com.bornaapp.borna2d.game.levels.Engine;import com.bornaapp.borna2d.game.levels.LevelBase;import com.bornaapp.borna2d.game.maps.Map;import com.bornaapp.borna2d.game.maps.MapArea;import com.bornaapp.borna2d.graphics.ParallaxBackground;import com.bornaapp.borna2d.graphics.ParallaxLayer;import com.bornaapp.borna2d.log;import com.bornaapp.borna2d.physics.CollisionEvent;import com.bornaapp.borna2d.systems.SoundSystem;import com.bornaapp.borna2d.systems.PathFindingSystem;import com.bornaapp.borna2d.systems.RenderingSystem;import com.bornaapp.shootingGallery.Characters.Coin;import com.bornaapp.shootingGallery.Characters.Heart;import com.bornaapp.shootingGallery.Characters.Rifle;import com.bornaapp.shootingGallery.Controls.CoinCounter;import com.bornaapp.shootingGallery.Controls.GameoverMenu;import com.bornaapp.shootingGallery.Controls.LevelCompleteMenu;import com.bornaapp.shootingGallery.Controls.LifeCounter;import com.bornaapp.shootingGallery.Controls.PauseMenu;public class L1 extends LevelBase {    public L1() {        super("assetManifest_L1.json");        loadProgressively = true;    }    private Rifle rifle;    private CoinCounter coinCounter;    private LifeCounter lifeCounter;    private PauseMenu pauseMenu;    private GameoverMenu gameoverMenu;    private LevelCompleteMenu levelCompleteMenu;    private boolean levelComplete;    @Override    protected void onCreate() {        long t = TimeUtils.millis();        log.info("Time stamp is: " + Long.toString(t));        rifle = new Rifle(new Vector2(100f, 100f));        coinCounter = new CoinCounter();        lifeCounter = new LifeCounter();        pauseMenu = new PauseMenu();        gameoverMenu = new GameoverMenu();        levelCompleteMenu = new LevelCompleteMenu();        levelComplete = false;        Engine.getInstance().setMasterVolume(1.0f);        //Loading playground tiled-Map        ////        Map map = this.getMap();//        map.setMarginsWidth_inTiles(0.1f, 0.1f, 0.1f, 0.1f);//        map.EnableMargins(true, true, true, true);//        map.Load("M1.tmx");        //Ashley        //        PooledEngine ashleyEngine = getAshleyEngine();        //registering ashley system        //        ashleyEngine.addSystem(new PathFindingSystem(this));        ashleyEngine.addSystem(new RenderingSystem(this));        ashleyEngine.addSystem(new SoundSystem(this));        //other initializations        //        this.backColor = Color.BLACK;        this.setLightingEnabled(false);        //Controls & Menus        //        coinCounter.Init();        lifeCounter.Init();        pauseMenu.Init();        gameoverMenu.Init();        levelCompleteMenu.Init();        log.info("Loading time is: " + Long.toString(TimeUtils.timeSinceMillis(t)));    }    @Override    protected void onUpdate() {        //queryInput        //        pauseMenu.setVisible(false);        gameoverMenu.setVisible(false);        levelCompleteMenu.setVisible(false);        if (Gdx.input.isKeyJustPressed(Input.Keys.ESCAPE)) {            this.paused = true;        }        // on-screen-debug texts & Lighting states        //        if (Gdx.input.isKeyJustPressed(Input.Keys.F1))            osd.SetF1(!osd.getF1());        if (Gdx.input.isKeyJustPressed(Input.Keys.F2))            osdVisible = !osdVisible;        osd.log("FPS", Integer.toString(Engine.getInstance().frameRate()));        //render debug info        //        if (Gdx.input.isKeyJustPressed(Input.Keys.NUM_3))            debugUI = !debugUI;        if (Gdx.input.isKeyJustPressed(Input.Keys.NUM_2)) //error            debugPhysics = !debugPhysics;        if (Gdx.input.isKeyJustPressed(Input.Keys.NUM_1)) //error            setLightingEnabled(!getLightingEnabled());    }    @Override    protected void whilePause() {        this.paused = true;        if (levelComplete)            levelCompleteMenu.setVisible(true);        else            pauseMenu.setVisible(true);        if (Gdx.input.isKeyJustPressed(Input.Keys.ESCAPE)) {            this.paused = false;            pauseMenu.setVisible(false);        }    }    @Override    protected void onDispose() {    }    @Override    protected void onResize(int width, int height) {    }    @Override    protected void onPause() {    }    @Override    protected void onResume() {    }    //region Gesture Overrided methods    @Override    public boolean touchDown(float x, float y, int pointer, int button) {        return false;    }    @Override    public boolean tap(float x, float y, int count, int button) {        return true;    }    @Override    public boolean longPress(float x, float y) {        return false;    }    @Override    public boolean fling(float velocityX, float velocityY, int button) {        return false;    }    @Override    public boolean pan(float x, float y, float deltaX, float deltaY) {        return true;    }    @Override    public boolean panStop(float x, float y, int pointer, int button) {        return false;    }    @Override    public boolean zoom(float initialDistance, float distance) {        return false;    }    @Override    public boolean pinch(Vector2 initialPointer1, Vector2 initialPointer2, Vector2 pointer1, Vector2 pointer2) {        return false;    }    //endregion    @Override    public void NextLevel() {        Engine.getInstance().setLevel(new L1());    }    @Override    public void RestartLevel() {        Engine.getInstance().setLevel(new L1());    }}